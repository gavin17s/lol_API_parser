#A simple parser for Riot's LoL API (WiP)
#Gavin Su
#http://gavin.su

import requests #Use "pip install requests" to acquire package
import json

def getChampionName(championID, uRegion, uAPI):

	apiURL = "https://"+uRegion+".api.pvp.net/api/lol/static-data/"+uRegion+"/v1.2/champion/"+str(championID["championId"])+"?dataById=true&api_key="+uAPI
	nameResponse = requests.get(apiURL)

	return nameResponse.json()

def requestPlayerData(pName, uRegion, uAPI):

	apiURL = "https://"+uRegion+".api.pvp.net/api/lol/"+uRegion+"/v1.4/summoner/by-name/"+pName+"?api_key="+uAPI
	nameResponse = requests.get(apiURL)

	return nameResponse.json()

def requestPlayerRank(pID, uRegion, uAPI):

	apiURL = "https://"+uRegion+".api.pvp.net/api/lol/"+uRegion+"/v2.5/league/by-summoner/"+pID+"/entry?api_key="+uAPI
	rankResponse = requests.get(apiURL)

	return rankResponse.json()

def displayPlayerData(pID, pName, pRank):

	print("Player {} is {} {} with {} LP.\n".format(pName, pRank[pID][0]['tier'], pRank[pID][0]['entries'][0]['division'], pRank[pID][0]['entries'][0]['leaguePoints']))

def currentGame(pID, uRegion, uAPI):

	platformID = {"br":"BR1", "eune":"EUN1", "euw":"EUW1", "kr":"KR", "lan":"LA1", "las":"LA2", "na":"NA1", "oce":"OC1", "tr":"TR1", "ru":"RU"}
	apiURL = "https://"+uRegion+".api.pvp.net/observer-mode/rest/consumer/getSpectatorGameInfo/"+platformID[uRegion]+"/"+pID+"?api_key="+uAPI
	gameResponse = requests.get(apiURL)

	try:
		return gameResponse.json()
	except:
		return False

def displayCurrentGame(gameData, uRegion, uAPI):

	with open("data/mapType.json") as jsonFileRead:
			mapType = json.load(jsonFileRead)

	with open("data/queueType.json") as jsonFileRead:
			queueType = json.load(jsonFileRead)

	if gameData == False:
		print("Player currently not ingame.")
	else:
		with open("data/championDict.json") as jsonFileRead:
			championDict = json.load(jsonFileRead)

		mapStr = str(gameData["mapId"])
		queueStr = str(gameData["gameQueueConfigId"])
		print("Player currently ingame.\nMap: {}\nGame mode: {}".format(mapType[mapStr], queueType[queueStr]))
		if gameData["gameQueueConfigId"] == 14 or gameData["gameQueueConfigId"] == 4 or gameData["gameQueueConfigId"] == 41 or gameData["gameQueueConfigId"] == 42:
			print("Banned champions:")
			for championB in gameData["bannedChampions"]:
				championIDStr = str(championB["championId"])
				if championIDStr not in championDict:
					print("test - calling api")
					cNameFromID = getChampionName(championB, uRegion, uAPI)
					championDict[championIDStr] = cNameFromID["name"]
				print(championDict[championIDStr])
			with open("data/championDict.json", "w") as jsonFileWrite:
				json.dump(championDict, jsonFileWrite)

def main():

	exitYes = False
	userOption1 = 0
	userAPI = ""
	userRegion = ""
	requestName = ""

	print("A simple program for parsing the Riot Games LoL API v0.1 by Gavin Su, http://gavin.su\n")

	while exitYes != True:
		print("=========================================================\nWhat would you like to do?")
		print("0. Exit.")

		if userAPI == "":
			print("1. Enter API key.")
		else:
			print("1. Change API key, current API key in use is: {}".format(userAPI))

		if userRegion == "":
			print("2. Set region.")
		else:
			print("2. Change region, current region is {}.".format(userRegion))

		print("3. Look up player data.")

		print("=========================================================")
		try:
			userOption1 = int(input("\nYour selection: "))
 
			if userOption1 == 0:
				exitYes = True
			elif userOption1 == 1:
				userAPI = input("Enter your API key: ").lower()
			elif userOption1 == 2:
				userRegion = input("Availible regions are: BR, EUWE, EUW, KR, LAN, LAS, NA, OCE, RU, TR\nEnter your region: ").lower()
			elif userOption1 == 3:
				if userAPI == "" or userRegion == "":
					print("You must enter your API key and region to use this function.")
				else:
					requestName = input("Enter the player name (No spaces): ").lower()

					nameResponse = requestPlayerData(requestName, userRegion, userAPI)
					playerID = str(nameResponse[requestName]["id"])
					playerRank = requestPlayerRank(playerID, userRegion, userAPI)
					displayPlayerData(playerID, nameResponse[requestName]["name"], playerRank)
					displayCurrentGame(currentGame(playerID, userRegion, userAPI), userRegion, userAPI)

				input("Press enter to continue...")

			else:
				print("Please enter a valid option.")
#		except:
#			print("Error.")
#			input("Press enter to continue...")
		finally:
			pass

main()
